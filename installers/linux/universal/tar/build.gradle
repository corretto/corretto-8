/*
* Copyright (c) 2018, 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation. Amazon designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*/

configurations {
    javafx
}

dependencies {
    javafx project(path: ':javafx', configuration: 'archives')
    compile project(path: ':openjdksrc', configuration: 'archives')
}
ext {
    // all linux distros and macos support 'uname -m'
    arch = ['uname', '-m'].execute().text.trim()

    switch (arch) {
    case 'aarch64':
        arch_alias = arch
        break;
    case 'x86_64':
        arch_alias = 'x64'
        break;
    default:
        throw new GradleException("${arch} is not suported")
    }
}

def jdkResultingImage = "$buildRoot/src/build/linux-${arch}-normal-server-release/images/j2sdk-image"

/**
 * Create a local copy of the source tree in our
 * build root -- this is required since OpenJDK's
 * build wants to occur inside the source tree,
 * and we don't want to tamper with someone
 * else's tree.
 */
task copySource(type: Copy) {
    dependsOn project.configurations.compile
    from tarTree(project.configurations.compile.singleFile)
    into buildRoot
}

task createJavafxOverlay(type: Copy) {
    dependsOn project.configurations.javafx
    from tarTree(project.configurations.javafx.singleFile)
    into "$buildDir/javafx"
    eachFile {
        if (it.path.startsWith('rt/')) {
            it.path = it.path.replace('rt/', 'jre/')
        }
    }
}

task configureBuild(type: Exec) {
    dependsOn copySource
    workingDir "$buildRoot/src"
    commandLine 'bash', 'configure',
            "--with-update-version=${project.version.update}",
            "--with-build-number=b${project.version.build}",
            "--with-corretto-revision=${project.version.revision}",
            '--with-milestone=fcs',
            '--disable-debug-symbols',
            '--disable-zip-debug-info',
            'LIBCXX=-static-libstdc++ -static-libgcc'
}

task executeBuild(type: Exec) {
    dependsOn configureBuild
    workingDir "$buildRoot/src"
    commandLine 'make', 'images'
    outputs.dir jdkResultingImage
}

task packageBuildResults(type: Tar) {
    description 'Compresses the JDK image and puts the results in build/distributions.'
    dependsOn executeBuild
    archiveName "amazon-corretto-${project.version.full}-linux-${arch_alias}.tar.gz"
    compression Compression.GZIP
    from(buildRoot) {
        include 'ASSEMBLY_EXCEPTION'
        include 'LICENSE'
        include 'THIRD_PARTY_README'
        include 'version.txt'
    }
    from(jdkResultingImage) {
        include 'bin/**'
        include 'include/**'
        include 'jre/**'
        include 'lib/**'
        include 'man/man1/**'
        include 'src.zip'
        exclude '**/cacerts'
    }
    from(buildRoot) {
        include 'cacerts'
        into 'jre/lib/security'
    }
    into "amazon-corretto-${project.version.full}-linux-${arch_alias}"

    // currently, OpenJFX doesn't support aarch64
    if (arch == 'x86_64') {
        dependsOn createJavafxOverlay
        from(createJavafxOverlay.destinationDir) {
            include 'bin/**'
            include 'jre/**'
            include 'lib/**'
            include 'man/man1/**'
            include 'javafx-src.zip'
        }
    }
}

artifacts {
    archives packageBuildResults
}
