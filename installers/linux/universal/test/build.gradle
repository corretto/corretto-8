/*
 * Copyright (c) 2018,2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation. Amazon designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

plugins {
    id 'com.bmuschko.docker-remote-api' version '4.3.0'
}

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerLogsContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerWaitContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

configurations {
    deb
    rpm
}

dependencies {
    deb project(path: ':installers:linux:universal:deb', configuration: 'archives')
    rpm project(path: ':installers:linux:universal:rpm', configuration: 'archives')
}

task assembleInstallers(type: Copy) {
    dependsOn project.configurations.deb
    dependsOn project.configurations.rpm
    from file(project.configurations.deb.singleFile)
    from file(project.configurations.rpm.singleFile)
    into "$buildRoot/installers"
}

// Create a test runner for each directory under 'docker', and attach its run
// method to the check phase for this project.
file('docker').list().each {

    def suite = it

    def _setupDockerRoot = tasks.create(name: "${suite}_setupDockerRoot", type: Copy) {
        dependsOn assembleInstallers
        from "docker/$suite"
        from "$buildRoot/installers"
        into "$buildRoot/docker/$suite"
    }

    def _build = tasks.create(name: "${suite}_buildDockerTestImage", type: DockerBuildImage) {
        dependsOn _setupDockerRoot
        inputDir = file("$buildRoot/docker/$suite")
        tags.add("corretto8/universal:${suite}-package-test")
    }

    def _create = tasks.create(name: "${suite}_createTestDocker", type: DockerCreateContainer) {
        dependsOn  _build
        targetImageId  _build.getImageId()
        envVars = [
                'tools': jdkTools.join(' ') + ' ' + jreTools.join(' '),
                'jdk_tools': jdkTools.join(' '),
                'jre_tools': jreTools.join(' ')]
        autoRemove = true
    }

    def _start = tasks.create(name: "${suite}_startTestDocker", type: DockerStartContainer) {
        dependsOn _create
        targetContainerId _create.getContainerId()
    }

    def _log = tasks.create(name: "${suite}_logTestResult", type: DockerLogsContainer) {
        dependsOn _start
        targetContainerId _start.getContainerId()
        follow = true
        tailAll = true
        onNext { message ->
            logger.quiet message.toString()
        }
    }

    def _wait = tasks.create(name: "${suite}_waitForTestFinish", type: DockerWaitContainer) {
        dependsOn _log
        targetContainerId _start.getContainerId()
        awaitStatusTimeout = 60

        doLast {
            if (getExitCode() != 0) {
                throw new GradleException("Suite ${suite} failed integration tests!")
            }
        }
    }

    def _run = tasks.create(name: "test${suite}", type: DockerRemoveImage) {
        dependsOn _wait
        targetImageId _create.getImageId()
        force = true
    }

    check.dependsOn(_run)
}

