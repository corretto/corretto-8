#
# Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

#
# User errors, command line errors.
#
cant.create.dir=\
        The directory {0} could not be create for output.
at.args.cant.read=\
        Can''t read command line arguments from file {1}.
at.args.file.not.found=\
        Can''t find file {0}.
at.args.io.exception=\
        The following I/O problem was encountered when processing an @ \
        argument on the command line: {0}.
old.jni.mixed=\
        Can''t mix options -jni and -old.  Try -help.
old.llni.mixed=\
        Can''t mix options -old and -llni.  Try -help.
old.not.supported=\
        Option -old not supported by this version of javah.
invalid.method.signature=\
        Invalid method signature: {0}
jni.llni.mixed=\
        Can''t mix options -jni and -llni.  Try -help.
jni.no.stubs=\
        JNI does not require stubs, please refer to the JNI documentation.
jni.sigerror=\
        Cannot determine signature for {0}
dir.file.mixed=\
        Can''t mix options -d and -o.  Try -help.
no.classes.specified=\
        No classes were specified on the command line.  Try -help.
no.outputfile.specified=\
        No outputfile was specified on the command line.  Try -help.
no.outputdir.specified=\
        No output directory was specified on the command line.  Try -help.
no.classpath.specified=\
        No classpath was specified on the command line.  Try -help.
no.bootclasspath.specified=\
        No bootclasspath was specified on the command line.  Try -help.
unknown.option=\
        {0} is an illegal argument\n
tracing.not.supported=\
        Warning: Tracing is no longer supported.  Instead, use\
        -verbose:jni option of the virtual machine.

#
# Usage message.
#
usage=\
Usage: javah [options] <classes>\n\
\n\
where [options] include:\n\
\n\t\
-help                 Print this help message and exit\n\t\
-classpath <path>     Path from which to load classes\n\t\
-cp <path>            Path from which to load classes\n\t\
-bootclasspath <path> Path from which to load bootstrap classes\n\t\
-d <dir>              Output directory\n\t\
-o <file>             Output file (only one of -d or -o may be used)\n\t\
-jni                  Generate JNI-style header file (default)\n\t\
-version              Print version information\n\t\
-verbose              Enable verbose output\n\t\
-force                Always write output files\n\
\n\
<classes> are specified with their fully qualified names (for\n\
instance, java.lang.Object).\n

main.usage=\
Usage: \n\
\  javah [options] <classes>\n\
where [options] include:
main.opt.o=\
\  -o <file>                Output file (only one of -d or -o may be used)
main.opt.d=\
\  -d <dir>                 Output directory
main.opt.v=\
\  -v  -verbose             Enable verbose output
main.opt.h=\
\  -h  --help  -?           Print this message
main.opt.version=\
\  -version                 Print version information
main.opt.jni=\
\  -jni                     Generate JNI-style header file (default)
main.opt.force=\
\  -force                   Always write output files
main.opt.classpath=\
\  -classpath <path>        Path from which to load classes
main.opt.cp=\
\  -cp <path>               Path from which to load classes
main.opt.bootclasspath=\
\  -bootclasspath <path>    Path from which to load bootstrap classes
main.usage.foot=\
<classes> are specified with their fully qualified names\n\
(for example, java.lang.Object).

#
# Version string.
#
javah.version={0} version "{1}"
javah.fullVersion={0} full version "{1}"

#
# These should have better diagnostics.
#
super.class.not.found=\
        A required super class {0} could not be found.
class.not.found=\
        Class {0} could not be found.
io.exception=\
        Can''t recover from an I/O error with the following message: \
        {0}.

#
# Problems in the guts of javah.
#
encoding.iso8859_1.not.found=\
        ISO8859_1 converter was not found for output.  This is \
        probably due to an error in the installation installation.
tried.to.define.non.static=\
        Tried to generate #define for non-static field.
jni.unknown.type=\
        An unknown type encountered (JNI).
unknown.array.type=\
        An unknown array type encountered when generating old style headers.
unknown.type.for.field=\
        An unknown type encountered when generating old style headers.
unknown.type.in.method.signature=\
        An unknown type eccountered when generating old style stubs.


err.prefix=Error:
err.cant.use.option.for.fm=Can't use {0} option with given file manager
err.internal.error=Internal error: {0}
err.ioerror=IO error: {0}
err.missing.arg=value missing for {0}
err.no.classes.specified=no classes specified
err.unknown.option=unknown option: {0}
