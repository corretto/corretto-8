/*
* Copyright (c) 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation. Amazon designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*/

dependencies {
    compile project(path: ':openjdksrc', configuration: 'archives')
}

ext {
    input_arch = project.findProperty('arch')

    if (!input_arch) {
        throw new GradleException("The Windows build must define 'arch'.")
    }

    switch(input_arch) {
        case 'x86':
            arch_alias = 'x86'
            folder_alias = 'x86'
            target_bits = '32'
            break
        case 'x64':
            arch_alias = 'x64'
            folder_alias = 'x86_64'
            target_bits = '64'
            break
        default:
            throw new GradleException("${input_arch} is not suported")
    }
}

task copySource(type: Copy) {
    dependsOn project.configurations.compile
    from tarTree(project.configurations.compile.singleFile)
    into buildRoot
}

task importAmazonCacerts(type: Exec) {
    dependsOn copySource
    workingDir buildRoot
    // Default password for JSSE key store
    def keystore_password = "changeit"
    commandLine 'keytool', '-importkeystore', '-noprompt',
            '-srckeystore', "amazon-cacerts",
            '-srcstorepass', keystore_password,
            '-destkeystore', "src/jdk/src/share/lib/security/cacerts",
            '-deststorepass', keystore_password
}

task configureBuild(type: Exec) {
    dependsOn importAmazonCacerts
    workingDir "$buildRoot/src"

    commandLine 'bash', 'configure',
            "--with-update-version=${project.version.update}",
            "--with-build-number=b${project.version.build}",
            "--with-corretto-revision=${project.version.revision}",
            '--with-milestone=fcs',
            '--disable-debug-symbols',
            '--disable-zip-debug-info',
            "--with-cacerts-file=$buildRoot/src/jdk/src/share/lib/security/cacerts",
            '--with-vendor-name=Amazon.com Inc.',
            '--with-vendor-url=https://aws.amazon.com/corretto/',
            '--with-vendor-bug-url=https://github.com/corretto/corretto-8/issues/',
            "--with-boot-jdk=${project.getProperty('bootjdk_dir')}",
            "--with-msvcr-dll=${project.getProperty('vcruntime_dir')}/msvcr120.dll",
            "--with-freetype=${project.getProperty('freetype_dir')}",
            "--target=${folder_alias}",
            "--with-target-bits=${target_bits}",
            "--with-toolchain-version=2013"
}

task executeBuild(type: Exec) {
    dependsOn configureBuild
    workingDir "$buildRoot/src"

    commandLine 'make', 'clean', 'images'
}

task copyImage(type: Copy) {
    dependsOn executeBuild

    from "${executeBuild.workingDir}/build/windows-$folder_alias-normal-server-release/images"
    into "$buildRoot/build"
}

task packageJdk(type: Zip) {
    dependsOn copyImage
    archiveName  = "unsigned-jdk-image.${arch_alias}.zip"

    from "$buildRoot/build/j2sdk-image"
}

task packageJre(type: Zip) {
    dependsOn copyImage
    archiveName = "unsigned-jre-image.${arch_alias}.zip"

    from "$buildRoot/build/j2re-image"
}

artifacts {
    archives packageJdk
    archives packageJre
}
