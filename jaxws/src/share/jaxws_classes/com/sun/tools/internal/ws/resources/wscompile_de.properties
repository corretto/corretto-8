#
# Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

wsimport.usage=Verwendung: {0} [options] <WSDL_URI>\n\nMit "wsimport -help" k\u00f6nnen Sie eine detaillierte Beschreibung von Optionen aufrufen.

wsimport.help=\nVerwendung: {0} [options] <WSDL_URI>\n\n\\wobei [options] Folgendes umfassen:\n\\  -b <path>                 Gibt jaxws/jaxb-Binding-Dateien oder zus\u00e4tzliche Schemas an\n\\                            (Jeder <path> muss seinen eigenen Switch -b enthalten)\n\\  -B<jaxbOption>            \u00dcbergibt diese Option an den JAXB-Schemacompiler\n\\  -catalog <file>           Gibt Katalogdatei zur L\u00f6sung externer Entity-Referenzen an\n\\                            Unterst\u00fctzt das TR9401-, XCatalog- und OASIS XML-Katalogformat.\n\\  -d <directory>            Gibt an, wo die generierten Ausgabedateien gespeichert werden sollen\n\\  -encoding <encoding>      Gibt die Zeichencodierung an, die von Quelldateien verwendet wird\n\\  -extension                L\u00e4sst Herstellererweiterungen zu - Funktionalit\u00e4t durch Spezifikation\n\\                            nicht angegeben. Die Verwendung von Erweiterungen kann\n\\                            zu nicht portierbaren Anwendungen\n\\                            oder Anwendungen f\u00fchren, die nicht mit anderen Implementierungen zusammenarbeiten\n\\  -help                     Zeigt einen Hilfetext an\n\\  -httpproxy:<host>:<port>  Gibt einen HTTP-Proxyserver an (Standardport ist 8080)\n\\  -keep                     Beh\u00e4lt generierte Dateien bei\n\\  -p <pkg>                  Gibt das Zielpackage an\n\\  -quiet                    Unterdr\u00fcckt die wsimport-Ausgabe\n\\  -s <directory>            Gibt an, wo die generierten Quelldateien gespeichert werden sollen\n\\  -target <version>         Generiert Code gem\u00e4\u00df der angegebenen JAXWS-Spezifikationsversion\n\\                            Standardversion ist 2.2, akzeptierte Werte sind 2.0, 2.1 und 2.2\n\\                            Beispiel: 2.0 generiert konformen Code f\u00fcr JAXWS 2.0-Spezifikation\n\\  -verbose                  Ausgabemeldungen zur Funktion, die der Compiler ausf\u00fchrt\n\\  -version                  Druckt Versionsinformationen\n\\  -wsdllocation <location>  @WebServiceClient.wsdlLocation-Wert\n\\  -clientjar <jarfile>      Erstellt die .jar-Datei der generierten Artefakte zusammen mit den\n\\                            WSDL -Metadaten, die f\u00fcr den Aufruf des Webservice erforderlich sind.\n\\  -generateJWS              Generierte verk\u00fcrzte JWS-Implementierungsdatei\n\\  -implDestDir <directory>  Gibt an, wo die JWS-Implementierungsdatei generiert werden soll\n\\  -implServiceName <name>   Lokaler Teil des Servicenamens f\u00fcr die generierte JWS-Implementierung\n\\  -implPortName <name>      Lokaler Teil des Portnamens f\u00fcr die generierte JWS-Implementierung

wsimport.usage.extensions=\n\\Erweiterungen:\n\\  -XadditionalHeaders              Ordnet Header, die nicht an Anforderungs- oder Antwortnachricht gebunden sind, \n\\                                   Java-Methodenparametern zu\n\\  -Xauthfile                       Datei mit Autorisierungsinformationen im Format \n\\                                   http://username:password@example.org/stock?wsdl\n\\  -Xdebug                          Druckt Debuginformationen\n\\  -Xno-addressing-databinding      Aktiviert das Binding von W3C EndpointReferenceType mit Java\n\\  -Xnocompile                      Kompiliert generierte Java-Dateien nicht\n\\  -XdisableAuthenticator           Deaktiviert Authentikator, der von JAX-WS RI verwendet wird,\n\\                                   -Xauthfile-Option wird ignoriert, wenn festgelegt\n\\  -XdisableSSLHostnameVerification deaktiviert die Pr\u00fcfung des SSL-Hostnamens beim Abruf von\n\\                                   wsdls


wsimport.usage.examples=\n\\Beispiele:\n\\  wsimport stock.wsdl -b stock.xml -b stock.xjb\n\\  wsimport -d generated http://example.org/stock?wsdl\n

wsgen.usage=Verwendung: {0} [options] <SEI>\n\nMit "wsgen -help" k\u00f6nnen Sie eine detaillierte Beschreibung von Optionen aufrufen.

wsgen.help=\nVerwendung: {0} [options] <SEI>\n\n\\wobei [options] Folgendes umfassen:\n\\  -classpath <path>          Gibt an, wo die Eingabeklassendateien gespeichert sind\n\\  -cp <path>                 wie -classpath <path>\n\\  -d <directory>             Gibt an, wo die generierten Ausgabedateien gespeichert werden sollen\n\\  -encoding <encoding>       Gibt die von Quelldateien verwendete Zeichencodierung an\n\\  -extension                 L\u00e4sst Herstellererweiterungen zu - Funktionalit\u00e4t nicht\n\\                             von der Spezifikation angegeben.  Die Verwendung von Erweiterungen kann\n\\                             zu Anwendungen f\u00fchren, die nicht portierbar sind, oder zu\n\\                             Anwendungen, die nicht mit anderen Implementierungen zusammenarbeiten\n\\  -help                      Zeigt einen Hilfetext an\n\\  -keep                      Beh\u00e4lt generierte Dateien bei\n\\  -r <directory>             Ressourcenzielverzeichnis, gibt an, wo\n\\                             Ressourcendateien gespeichert werden, wie WSDL-Dateien\n\\  -s <directory>             Gibt an, wo die generierten Quelldateien gespeichert werden\n\\  -verbose                   Ausgabemeldungen zur gerade ausgef\u00fchrten Funktion des Compilers\n\\  -version                   Druckt Versionsinformationen\n\\  -wsdl[:protocol]           Generiert eine WSDL-Datei. Das Protokoll ist optional.\n\\                             G\u00fcltige Protokolle sind {1},\n\\                             Das Standardprotokoll ist soap1.1.\n\\                             Die Nicht-Standardprotokolle {2}\n\\                             k\u00f6nnen nur in Verbindung mit der \n\\                             Option "-extension" verwendet werden.\n\\  -inlineSchemas             Inline-Schemas in der generierten wsdl. M\u00fcssen in\n\\                             Verbindung mit der Option "-wsdl" verwendet werden.\n\\  -servicename <name>        Gibt den Servicenamen an, der in der generierten WSDL verwendet werden soll\n\\                             Wird in Verbindung mit der Option "-wsdl" verwendet.\n\\  -portname <name>           Gibt den Portnamen zur Verwendung in der generierten WSDL an\n\\                             Wird in Verbindung mit der Option "-wsdl" verwendet.


wsgen.usage.examples=\n\\Beispiele:\n\\  wsgen -cp . example.Stock\n\\  wsgen -cp . example.Stock -wsdl -servicename '{http://mynamespace}MyService'\n
wrapperTask.needEndorsed=Sie arbeiten mit JDK6, das mit JAX-WS {0}-API geliefert wird, dieses Tool erfordert jedoch JAX-WS {1}-API. Verwenden Sie das "Endorsed Standards Override Mechanism"-Verfahren (http://docs.oracle.com/javase/6/docs/technotes/guides/standards/), oder setzen Sie xendorsed="true" in <{2}>.

# {0}, {2} - version (e.g. 2.1), {1} - absolute class location
wrapperTask.loadingIncorrectApi=Sie laden JAX-WS {0}-API aus {1}, dieses Tool erfordert jedoch JAX-WS {2}-API.

invoker.needEndorsed=Sie arbeiten mit JDK6, das mit JAX-WS {0}-API geliefert wird, dieses Tool erfordert jedoch JAX-WS {1}-API. Verwenden Sie das "Endorsed Standards Override Mechanism"-Verfahren (http://docs.oracle.com/javase/6/docs/technotes/guides/standards/), oder verwenden Sie die Option "-Xendorsed".


#
# Generic Messages
#
wscompile.invalidOption=unbekannter Parameter {0}
wsimport.noSuchJaxbOption=keine derartige JAXB-Option: {0}

wscompile.error=Fehler: {0}
wscompile.warning=Warnung: {0}
wscompile.info=Informationen: {0}
wscompile.duplicateOption=doppelte Option: {0}
wscompile.noSuchDirectory=Verzeichnis nicht gefunden: {0}
# wscompile.missingOptionArgument
wscompile.missingOptionArgument=Option "{0}" erfordert ein Argument.
wscompile.compilationFailed=Kompilierung nicht erfolgreich, Fehler sollten gemeldet worden sein
wscompile.unsupportedEncoding=nicht unterst\u00fctzte Codierung: {0}

wsimport.missingFile=WSDL_URI fehlt

wsgen.invalid.protocol=\"{0}\" ist kein unterst\u00fctztes Protokoll. Unterst\u00fctzte Protokolle umfassen: {1}.
wsgen.invalid.transport=\"{0}\" ist kein unterst\u00fctzter Transport. Unterst\u00fctzte Transporte umfassen: {1}.
wsgen.class.not.found=Klasse nicht gefunden: "{0}"
wsgen.could.not.create.file=Datei konnte nicht erstellt werden: "{0}"
wsgen.missingFile=SEI fehlt
wsgen.soap12.without.extension=Das optionale Protokoll \"Xsoap1.2\" muss in Verbindung mit der Option \"-extension\" verwendet werden.
wsgen.protocol.without.extension=Das optionale Protokoll \"{0}\" muss in Verbindung mit der Option \"-extension\" verwendet werden.
wsgen.wsdl.arg.no.genwsdl=Die Option \"{0}\" kann nur in Verbindung mit der Option "-wsdl" verwendet werden.
wsgen.servicename.missing.namespace=Im Servicenamen \\"{0}\\" fehlt ein Namespace.
wsgen.servicename.missing.localname=Im Servicenamen \\"{0}\\" fehlt ein lokaler Name.
wsgen.portname.missing.namespace=Im Portnamen \\"{0}\\" fehlt ein Namespace.
wsgen.portname.missing.localname=Im Portnamen \\"{0}\\" fehlt ein lokaler Name.
wsgen.class.must.be.implementation.class=Die Klasse \\"{0}\\" ist keine End Point-Implementierungsklasse.
wsimport.NotAFileNorURL = "{0}" ist weder ein Dateiname noch eine URL

wsgen.cannot.gen.wsdl.for.non.soap.binding=wsgen kann WSDL f\u00fcr Nicht-SOAP-Binding nicht generieren: {0} in Klasse {1}

wsgen.cannot.gen.wsdl.for.soap12.binding=wsgen kann WSDL f\u00fcr SOAP 1.2-Binding nicht generieren: {0} in Klasse {1}
Please geben Sie die Switches \\"-extension\\" und \\"-wsdl:protocol XSoap1.2\\" an. Beispiel:\n\n
wsgen -wsdl:protocol XSoap1.2 -extension {1}
wsgen.inlineSchemas.only.with.wsdl=\"-inlineSchemas\" muss in Verbindung mit der Option \"-wsdl\" verwendet werden

wsgen.no.webservices.class=wsgen hat keine Klasse mit @WebService-Annotation gefunden. Geben Sie @WebService-Annotation in {0} an.

wsimport.no.wsdl=Schemadokument {0} konnte nicht gelesen werden, da 1) das Dokument nicht gefunden werden konnte; 2) das Dokument nicht gelesen werden konnte; 3) das Root-Element des Dokuments nicht <wsdl:definitions> ist.

wsimport.FailedToParse = Parsen von "{0}" nicht m\u00f6glich: {1}

wsimport.ParsingWSDL=WSDL wird geparst ...\n\n
wsimport.GeneratingCode=\nCode wird generiert ...\n
wsimport.CompilingCode=\nCode wird kompiliert ...\n
wsimport.ILLEGAL_TARGET_VERSION = "{0}" ist keine g\u00fcltige Zielversion. "2.0" und "2.1" werden unterst\u00fctzt.

wsimport.ILLEGAL_AUTH_INFO = "{0}" ist kein g\u00fcltiges Format f\u00fcr Autorisierungsinformationen. Das Format ist http[s]://user:password@host:port//<url-path>.

wsimport.readingAuthFile = Es wird versucht, die Autorisierungsdatei zu lesen: "{0}" ...

# {0} - path to current authorization file, {1} - path to metro authorization file
wsimport.authFileNotFound = Autorisierungsdatei "{0}" nicht gefunden. Wenn f\u00fcr den WSDL-Zugriff die Basisauthentifizierung erforderlich ist, geben Sie eine Autorisierungsdatei mit Lesezugriff in {1} an oder verwenden -Xauthfile, um die Autorisierungsdatei anzugeben. Geben Sie auf jeder Zeile Autorisierungsinformationen mit folgendem Format an: http[s]://user:password@host:port//<url-path>

# {0} - exception message, {1} - systemId (e.g. location of WSDL file) , {2} - path to metro authentication file e.g.: Server returned HTTP response code: 401 for URL: http://localhost:8080/myServer/mywebService?WSDL, "http://localhost:8080/myServer/mywebService?WSDL" needs authorization, please provide authorization file with read access at C:\Documents and Settings\user\.metro\auth or use -Xauthfile to give the authorization file and on each line provide authorization information using this format : http[s]://user:password@host:port//
wsimport.authInfoNeeded = {0}, "{1}" erfordert Autorisierung. Geben Sie eine Autorisierungsdatei mit Lesezugriff in {2} an, oder verwenden Sie -Xauthfile, um die Autorisierungsdatei anzugeben. Geben Sie auf jeder Zeile Autorisierungsinformationen mit folgendem Format an: http[s]://user:password@host:port//<url-path>

wsimport.AUTH_INFO_LINENO = "Zeile {0} von {1}


wsimport.ErrorMessage = [ERROR] {0}

wsimport.WarningMessage = [WARNING] {0}

wsimport.InfoMessage = [INFO] {0}

wsimport.DebugMessage = [DEBUG] {0}

wsimport.httpRedirect = Server hat HTTP-Statuscode zur\u00fcckgegeben: "{0}", Vorgang wird mit "{1}" wiederholt

wsimport.maxRedirectAttempt = Eine WSDL kann nicht abgerufen werden. die H\u00f6chstanzahl von Umleitungen (5) ist erreicht

wsimport.wsdllocation.clientjar = wsdlLocation kann bei Verwendung der Option "clientJar" nicht angegeben werden
# {0} - path to a zip file
wsimport.archivingArtifacts=\nDie generierten Artefakte werden in {0} archiviert.\n
wsimport.archiveArtifact={0} wird dem Archiv {1} hinzugef\u00fcgt
wsimport.fetchingMetadata=\nDie WSDL und die zugeh\u00f6rigen Metadaten werden heruntergeladen\n
# {0} - URI, {1} - path to a file
wsimport.document.download=\nMetadatendokument wird aus {0} in {1} heruntergeladen
