From 52ec9830827dee359c9818bddb0923407df9fd87 Mon Sep 17 00:00:00 2001
From: akashche <akashche@redhat.com>
Date: Tue, 23 Apr 2019 04:57:12 -0700
Subject: [PATCH 03/12] apply JDK-8160464: Application.getHostServices throws
 ClassNotFoundException

---
 .../javafx/application/HostServicesDelegate.java   | 123 ++++++++++++++++++++-
 1 file changed, 120 insertions(+), 3 deletions(-)

diff --git a/modules/graphics/src/main/java/com/sun/javafx/application/HostServicesDelegate.java b/modules/graphics/src/main/java/com/sun/javafx/application/HostServicesDelegate.java
index 08f1bc1..fa23c06 100644
--- a/modules/graphics/src/main/java/com/sun/javafx/application/HostServicesDelegate.java
+++ b/modules/graphics/src/main/java/com/sun/javafx/application/HostServicesDelegate.java
@@ -25,8 +25,10 @@
 
 package com.sun.javafx.application;
 
-import java.lang.reflect.InvocationTargetException;
+import java.awt.Desktop;
+import java.io.File;
 import java.lang.reflect.Method;
+import java.net.URI;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
@@ -55,7 +57,6 @@ public abstract class HostServicesDelegate {
                                 getInstanceMeth = factoryClass.getMethod(
                                         "getInstance", Application.class);
                             } catch (Exception ex) {
-                                ex.printStackTrace();
                                 return null;
                             }
                         }
@@ -67,7 +68,10 @@ public abstract class HostServicesDelegate {
             System.err.println(pae.getException().toString());
             return null;
         }
-
+        if (instance == null) {
+            // in this case we are in standalone mode
+            instance = StandaloneHostService.getInstance(app);
+        }
         return instance;
     }
 
@@ -81,4 +85,117 @@ public abstract class HostServicesDelegate {
     public abstract void showDocument(String uri);
 
     public abstract JSObject getWebContext();
+
+    // StandaloneHostService implementation
+    private static class StandaloneHostService extends HostServicesDelegate {
+
+        private static HostServicesDelegate instance = null;
+
+        private Class appClass = null;
+
+        public static HostServicesDelegate getInstance(Application app) {
+            synchronized (StandaloneHostService.class) {
+                if (instance == null) {
+                    instance = new StandaloneHostService(app);
+                }
+                return instance;
+            }
+        }
+
+        private StandaloneHostService(Application app) {
+             appClass = app.getClass();
+        }
+
+        @Override
+        public String getCodeBase() {
+            // If the application was launched in standalone mode, this method
+            // returns the directory containing the application jar file.
+            // If the application is not packaged in a jar file, this method
+            // returns the empty string.
+            String theClassFile = appClass.getName();
+            int idx = theClassFile.lastIndexOf(".");
+            if (idx >= 0) {
+                // Strip off package name prefix in class name if exists
+                // getResoruce will automatically add in package name during
+                // lookup; see Class.getResource javadoc for more details
+                theClassFile = theClassFile.substring(idx + 1);
+            }
+            theClassFile = theClassFile + ".class";
+
+            String classUrlString = appClass.getResource(theClassFile).toString();
+            if (!classUrlString.startsWith("jar:file:") ||
+                    classUrlString.indexOf("!") == -1) {
+                return "";
+            }
+            // Strip out the "jar:" and everything after and including the "!"
+            String urlString = classUrlString.substring(4,
+                    classUrlString.lastIndexOf("!"));
+            File jarFile = null;
+            try {
+                jarFile = new File(new URI(urlString).getPath());
+            } catch (Exception e) {
+                // should not happen
+            }
+            if (jarFile != null) {
+                String codebase = jarFile.getParent();
+                if (codebase != null) {
+                    return toURIString(codebase);
+                }
+            }
+
+            return "";
+        }
+
+        private String toURIString(String filePath) {
+            try {
+                return new File(filePath).toURI().toString();
+            } catch (Exception e) {
+                // should not happen
+                // dump stack for debug purpose
+                e.printStackTrace();
+            }
+            return "";
+        }
+
+        @Override public String getDocumentBase() {
+            // If the application was launched in standalone mode,
+            // this method returns the URI of the current directory.
+            return toURIString(System.getProperty("user.dir"));
+        }
+
+        static final String[] browsers = {"google-chrome", "firefox", "opera",
+            "konqueror", "mozilla"};
+
+        @Override
+        public void showDocument(final String uri) {
+            String osName = System.getProperty("os.name");
+            try {
+                if (osName.startsWith("Mac OS")) {
+                    Desktop.getDesktop().browse(URI.create(uri));
+                } else if (osName.startsWith("Windows")) {
+                    Runtime.getRuntime().exec(
+                            "rundll32 url.dll,FileProtocolHandler " + uri);
+                } else { //assume Unix or Linux
+                    String browser = null;
+                    for (String b : browsers) {
+                        if (browser == null && Runtime.getRuntime().exec(
+                                new String[]{"which", b}).getInputStream().read() != -1) {
+                            Runtime.getRuntime().exec(new String[]{browser = b, uri});
+                        }
+                    }
+                    if (browser == null) {
+                        throw new Exception("No web browser found");
+                    }
+                }
+            } catch (Exception e) {
+                // should not happen
+                // dump stack for debug purpose
+                e.printStackTrace();
+            }
+        }
+
+        @Override public JSObject getWebContext() {
+            return null;
+        }
+    }
 }
-- 
1.8.3.1

