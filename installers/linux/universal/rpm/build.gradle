/*
 * Copyright (c) 2018, Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation. Amazon designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

plugins {
    id "nebula.ospackage" version "5.2.0"
}

dependencies {
    compile project(path: ':installers:linux:universal:tar', configuration: 'archives')
}

def jvmDir = '/usr/lib/jvm'
def jdkInstallationDirName = "java-1.${project.version.major}.0-amazon-corretto"
def jdkHome = "${jvmDir}/${jdkInstallationDirName}"
def jdkBinaryDir = "${buildRoot}/amazon-corretto-${project.version.full}-linux-x64"
def jdkPackageName = "java-1.${project.version.major}.0-amazon-corretto-devel"


ospackage {
    version project.version.upstream
    release project.version.revision

    url "${packageInfo.url}"
    vendor "${packageInfo.vendor}"
    packager "${packageInfo.packager}"
    license "${packageInfo.license}"
    buildHost "${packageInfo.buildHost}"
    user 'root'
    permissionGroup 'root'
    epoch 1
    arch X86_64
    os LINUX
    type BINARY
}

/**
 * Uncompress and copy the universal Corretto artifact
 * tar for RPM packaging.
 */
task extractUniversalTar(type: Copy) {
    dependsOn project.configurations.compile
    from tarTree(project.configurations.compile.singleFile)
    into buildRoot
}

/**
 * Populate version numbers, java home and alternatives
 * priority to postin_javac.sh.template and preun_javac.sh.template.
 * Create script copies under build root scripts folder.
 */
task inflateRpmScriptTemplate(type: Copy) {
    dependsOn extractUniversalTar
    // Use the same priority as IcedTea JDK RPM distribution, based on java version
    def priority = "10${project.version.major}00${project.version.update}".toString()
    from('scripts') {
        include '**/*.template'
        rename { file -> file.replace('.template', '') }
        filter(org.apache.tools.ant.filters.ReplaceTokens,
                tokens: project.version + [alternatives_priority: priority])
    }
    into "${buildRoot}/scripts"
}

/**
 * Generate RPM for JDK, with package published under
 * distributions folder.
 */
task generateJdkRpm(type: Rpm) {
    description 'Create the RPM package for Corretto JDK'
    dependsOn inflateRpmScriptTemplate

    packageName jdkPackageName
    packageDescription "Amazon Corretto\'s packaging of the OpenJDK ${project.version.major} code."
    summary "Amazon Corretto ${project.version.major} development environment"
    packageGroup 'Development/Tools'
    prefix(jdkHome)
    postInstall file("$buildRoot/scripts/postin_java.sh")
    postInstall file("$buildRoot/scripts/postin_javac.sh")
    preUninstall file("$buildRoot/scripts/preun_java.sh")
    preUninstall file("$buildRoot/scripts/preun_javac.sh")

    provides(jdkPackageName, "${epoch}:${version}-${release}", EQUAL)
    provides('java-devel', "${epoch}:1.8.0", EQUAL)
    provides('java-devel-openjdk', "${epoch}:${project.version.full}", EQUAL)
    provides('java-devel-openjdk-devel', "${epoch}:${version}-${release}.x86_64", EQUAL)
    provides('java-1.8.0-devel', "${epoch}:${project.version.full}", EQUAL)
    provides('java-sdk', "${epoch}:1.8.0", EQUAL)
    provides('java-sdk-1.8.0', "${epoch}:${project.version.full}", EQUAL)
    provides('java-sdk-1.8.0-openjdk', "${epoch}:${project.version.full}", EQUAL)
    provides('java-sdk-openjdk ', "${epoch}:${project.version.full}", EQUAL)

    from(jdkBinaryDir) {
        into jdkHome
        createDirectoryEntry = true
    }
}

artifacts {
    archives generateJdkRpm
}
